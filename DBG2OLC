==Introduction==
:''DBG2OLC'' is an assembler using Illumina contigs as anchor points to construct an overlap graph with long reads.

\noindent
Website : https://github.com/yechengxi/DBG2OLC

==Installation==
:''DBG2OLC'' requires a linux system and the prior installation of ''Blasr'' and ''Sparc''.
''DBG2OLC'', ''Blasr'' and ''Sparc'' can be downloaded as source code. ''Blasr'' Installation requires hdf 1.8.12+. 
It is also possible to install ''SparseAssembler'' in order to construct contigs from short readings.

''DBG2OLC'' installation:

    $ git clone http://git.code.sf.net/p/dbg2olc/code dbg2olc-code
    $ cd dbg2olc-code
    $ g++ DBG2OLC.cpp -o DBG2OLC

''Blasr'' installation:

    $ git clone git://github.com/PacificBiosciences/blasr.git blasr
    $ ./configure.py --no-pbbam HDF5_INCLUDE=f1 HDF5_LIB=f2 
    $ make blasr

:<b>f1</b>: fichier header HDF5
:<b>f2</b>: fichier librairie HDF5

''Sparc'' installation:

    $ git clone http://git.code.sf.net/p/sparc-consensus/code sparc-consensus-code
    $ g++ Sparc.cpp -o Sparc

==Input data==
:''DBG2OLC'' accepts contigs with either long reads (Pacbio, Nanopore) in FASTA format, or short reads like illumina in FASTA or FASTQ format. Contigs can previously be constructed using a DBG assembler such as ''SparseAssembler''.

==Pipeline==
:''DBG2OLC'' software is divided in 5 stages :

:*Construction of a De-Bruijn graph and creation of contigs from short readings ''SparseAssembler''
:*Alignment of contigs with each long read. Long reads are compressed into lists of anchors
:*Execution of multiple alignments to suppress chimeric long reads
:*Construction of an overlap graph using long compressed reads
:*Deduction of a consensus sequence from the graph

The following command launch the pipeline:

    $ ./DBG2OLC k 17 KmerCovTh 2 MinOverlap 20 AdaptiveTh 0.002 Contigs Contigs.txt RemoveChimera 1 f <fichier_pacbio1> f <fichier_pacbio2>

:<b>KmerCovTh</b>: fixed k-mer matching threshold
:<b>MinOverlap</b>: minimum overlap score between a pair of long reads
:<b>AdaptiveTh</b>: adaptive k-mer matching threshold
:<b>k</b>: kmer length
:<b>Contigs</b>: the contigs file in Fasta format
:<b>MinLen</b>: read minimum length
:<b>RemoveChimera</b>: suppresses chimeric readings in a data set.

This parameters are critical for performance : KmerCovTh, MinOverlap et AdaptiveTh.

For PacBio data, depending on the coverage, it is advised to use the following values : 

{| class="wikitable"
|-
!Coverage
|10x/20x
|50x/100x
|-
!KmerCovTh
|2-5
|2-10
|-
!MinOverlap
|10-30
|50-150
|-
!AdaptiveTh
|0.001~0.01
|0.01-0.02
|}

A file named "backbone_raw.fasta" contains scaffolds constructed by ''DBG2OLC''. 
In order to finish the assembly, the script "split_and_run" must be executed. 
Verify that ''Blasr'' has been defined in the PATH variable, that the ''Sparc'' binary is present in the same folder as the script to be executed and the following files:

:*The scaffolds file produced by ''DBG2OLC'' ("backbone_raw.fasta")
:*The consensus file generated by ''DBG2OLC'' ("DBG2OLC_Consensus_info.txt")
:*The contigs file
:*The long reads file

Then, it is necessary to merge the long reads and the contigs files into a single file.

    $ cat Contigs.txt pb_reads.fasta > ctg_pb.fasta

Finally, the script "split_and_run_sparc.sh" located in the "utility" folder must be run.

    $ sh ./split_and_run_sparc.sh backbone_raw.fasta  DBG2OLC_Consensus_info.txt ctg_pb.fasta ./consensus_dir > consensus_log.txt

==Encountered errors==
:<b>Error</b>: $./split_and_run_sparc_r2.sh$: 1: eval: blasr: not found

<b>Solution</b>: Edit the script  "split_and_run_sparc.sh" so that BLASR can be found.

==Output file==
:The script "split_and_run" generate a file named "final_assembly.fasta" in the \emph{utility} folder, containing scaffolds from the finished assembly.

==Assembly evaluation==
:Dataset:

{| class="wikitable"
|-
!Reference genome
|Escherichia coli k-12 MG1655 1 chromosome (4 641 652 pb)
|-
!Pacbio reads (P6C4)
|87497 reads corrected by ''Lordec'' (100x coverage)
|-
!Illumina reads (MiSeq)
|16759877 reads (2x150pb)
|}

The reference genome is used to evaluate the quality of the assembly, based on metrics produced by the QUAST software.

:<b># Contigs (> 1000pb)</b>:  Total number of contigs exceeding 1000 bp in the assembly.

:<b>Largest contig</b>: The length of the longest contig in the assembly.

:<b>Total length</b>: total number of bases in the assembly.

:<b>N50</b>: the length for which the collection of all contigs of that length or longer covers at least half an assembly.

:<b># Misassembled contigs</b>: the number of positions in the contigs (breakpoints) that satisfy one of the following criteria :
:::-The left flanking sequence aligns over 1 kbp away from the right flanking sequence on the reference.
:::-Flanking sequences overlap on more than 1 kbp
:::-Flanking sequences align to different strands or different chromosomes; .

:<b>Misassembled contigs length</b>: the total number of bases in misassembled contigs.

:<b>Genome fraction</b>: the percentage of aligned bases in the reference genome.

{| class="wikitable"
|-
!Metrics (Quast)
!DBG2OLC assembly
|-
!# contigs
|134
|-
!N50
|81570
|-
!Largest contig
|386914
|-
!Execution time
|2h43m30s
|-
!Total length
|6439845
|-
!# misassembled contigs
|15
|-
!misassembled contigs length
|1457662
|-
!Genome fraction
|91.57
|}

More assembly results can be found at

